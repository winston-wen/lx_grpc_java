/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lx;
import com.google.common.annotations.VisibleForTesting;
import com.google.protobuf.Message;
import io.grpc.Channel;
import io.grpc.Grpc;
import io.grpc.InsecureChannelCredentials;
import io.grpc.ManagedChannel;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import io.grpc.stub.StreamObserver;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

import lx.protogen.lbcs.Lbcs;
import lx.protogen.lbcs.LubanClientGrpc;
import lx.protogen.lbcs.LubanClientGrpc.LubanClientBlockingStub;
import lx.protogen.lbcs.LubanClientGrpc.LubanClientStub;


public class LbcsClient {
    // Run with  ./gradlew --args="<session_id> <owner_id>"
    public static void main(String[] args) throws InterruptedException {
        ManagedChannel channel = Grpc.newChannelBuilder("127.0.0.1:9001", InsecureChannelCredentials.create()).build();
        try {
            LbcsClient cl = new LbcsClient(channel);
            cl.clientKeygen(args[0], args[1]);
        } finally {
            channel.shutdownNow().awaitTermination(5, TimeUnit.SECONDS);
        }
    }

    private static final Logger logger = Logger.getLogger(LbcsClient.class.getName());
    private final LubanClientBlockingStub blockingStub;
    private final LubanClientStub asyncStub;

    public LbcsClient(Channel channel) {
        blockingStub = LubanClientGrpc.newBlockingStub(channel);
        asyncStub = LubanClientGrpc.newStub(channel);
    }

    public void clientKeygen(String session_id, String owner_id) {
        info("Start a keygen session with session_id={0}, owner_id={1}", session_id, owner_id);
        Lbcs.BasicMpcRequest request = Lbcs.BasicMpcRequest.newBuilder()
            .setLbmSessionId(session_id)
            .setOwnerId(owner_id)
            .build();
        Iterator<Lbcs.MpcProgress> progresses;
        try {
            progresses = blockingStub.clientKeygen(request);
            while (progresses.hasNext()) {
                Lbcs.MpcProgress progress = progresses.next();
                info(progress.toString());
            }
        } catch (StatusRuntimeException e) {
            warning("RPC failed: {0}", e.toString());
        }
    }

    private void info(String msg, Object... params) {
        logger.log(Level.INFO, msg, params);
    }
    
    private void warning(String msg, Object... params) {
        logger.log(Level.WARNING, msg, params);
    }
}
